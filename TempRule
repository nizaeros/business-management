# Business Management System Guidelines

## Project Context
A comprehensive business management system focusing on:
- Client Management (profiles, hierarchy, multiple locations)
- Service Management (agreements, expiry tracking, routine tasks)
- User Access Control (client portal, internal staff access)
- Task Management (one-time and routine service tasks)
- Business Operations (multi-business support, staff management)

## Core Development Principles

### 1️⃣ Code Quality First
- Write self-documenting, minimal code
- Follow DRY (Don't Repeat Yourself) without over-abstraction
- Implement "Less Code, Less Surprise, Less Bug" principle
- Use TypeScript strict mode always
- Reference: `project_docs/development/git-workflow.md`

### 2️⃣ Project Structure
```bash
src/
├── app/                    # Next.js 13+ App Router
│   ├── (auth)/            # Auth routes (/login, /reset-password)
│   ├── (internal)/internal/# Staff portal routes
│   └── (external)/external/# Client portal routes
├── components/
│   ├── ui/                # Primitive components
│   ├── business/          # Internal portal components
│   └── client/            # Client portal components
```
For complete structure and guidelines:
- Codebase Structure: `project_docs/codebase-structure.md`
- Deployment Structure: `project_docs/deployment.md`

### 3️⃣ Feature Development Flow
1. Requirements & Planning
   - Use template: `project_docs/features/_template/feature_template.md`
   - Document API: `project_docs/features/{feature-name}/api.md`
   - Track status: `project_docs/status/feature_tracker.md`

2. Implementation Rules
   - Follow component guidelines: `project_docs/design-system/components.md`
   - Use design system: `project_docs/design-system/overview.md`
   - Storage rules: `project_docs/features/storage/storage-guidelines.md`

### 4️⃣ Security & Access Control
- Implement Row Level Security (RLS)
- Follow auth system: `project_docs/features/auth/login-system.md`
- Use role-based access control:
  - Internal: Business staff access
  - External: Client portal access
  - System: Admin access

### 5️⃣ Data Management
- Use Supabase for:
  - Database (PostgreSQL)
  - Authentication
  - Storage
  - Real-time updates
- Follow migrations: `project_docs/database/migrations.md`

### 6️⃣ UI/UX Standards
- Colors:
  - Primary: Egyptian Blue (#1034A6)
  - Secondary: Gold Yellow (#F3BE2B)
- Components: `project_docs/design-system/components.md`
- Toast notifications: `project_docs/design-system/toast-notifications.md`

### 7️⃣ Testing Requirements
- Unit tests for utilities (Jest)
- Component tests (React Testing Library)
- E2E tests for critical flows (Cypress)
- Accessibility (axe-core)
- Performance (Lighthouse score 90+)

### 8️⃣ Deployment & CI/CD
- Follow deployment guide: `project_docs/deployment.md`
- Branch strategy:
  - `main`: Production environment
  - `staging`: Pre-production testing
  - `develop`: Development integration
- Environment management:
  - Use `.env.local` for local development
  - Vercel for production secrets
  - Never commit sensitive data

## Quick Feature Implementation Guide

### Business Domain Features
1. Client Management
   - Hierarchical structure (HQ → Branches)
   - Multiple locations support
   - Logo and brand management
   - Industry categorization

2. Service Management
   - Service agreements with expiry
   - Automated renewal notifications
   - Service task templates
   - Status tracking

3. Task Management
   - One-time service tasks
   - Routine maintenance tasks
   - Task assignment and tracking
   - Status updates and notifications

4. User Management
   - Business staff roles
   - Client user roles
   - Access control per business/client
   - Activity logging

## Development Checklist

### Before Starting
- [ ] Check existing components
- [ ] Review feature documentation
- [ ] Plan database structure
- [ ] Consider access control

### During Development
- [ ] Follow TypeScript strict mode
- [ ] Implement proper error handling
- [ ] Add loading states
- [ ] Consider offline scenarios

### Before Completion
- [ ] Test all user roles
- [ ] Verify mobile responsiveness
- [ ] Check accessibility
- [ ] Update documentation

## Status & Progress
Current project status: `project_docs/status/current_status.md`
Feature tracker: `project_docs/status/feature_tracker.md`
Deployment guide: `project_docs/deployment.md`